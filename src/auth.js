// –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
class AuthSystem {
    constructor() {
        this.users = JSON.parse(localStorage.getItem('users')) || [];
        this.currentUser = JSON.parse(localStorage.getItem('currentUser')) || null;
        this.posts = JSON.parse(localStorage.getItem('posts')) || [];
        
        this.init();
    }

    init() {
        this.initializeDefaultData();
        this.updateUI();
        this.loadUsers();
        this.loadPosts();
        this.displayPosts();
        this.updateStats();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    initializeDefaultData() {
        let needSave = false;

        if (this.users.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            this.users.push({
                id: 1,
                username: 'admin',
                email: 'admin@alacrity-rp.ru',
                password: 'admin123',
                role: 'admin',
                createdAt: new Date().toISOString(),
                lastLogin: new Date().toISOString()
            });

            // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.users.push({
                id: 2,
                username: 'user',
                email: 'user@example.com',
                password: 'user123',
                role: 'user',
                createdAt: new Date().toISOString(),
                lastLogin: new Date().toISOString()
            });

            needSave = true;
        }

        if (this.posts.length === 0) {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            this.posts.push({
                id: 1,
                title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ALACRITY RP! üéâ',
                content: '–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π —Å–µ–º—å–µ! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –¥—Ä—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã –∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —Å–∞–º–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–µ–º—å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Phoenix RP!',
                category: 'news',
                imageUrl: '',
                author: 'admin',
                authorId: 1,
                createdAt: new Date().toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }),
                likes: 15,
                comments: []
            });

            this.posts.push({
                id: 2,
                title: 'üéÆ –ì—Ä—è–¥—É—â–∏–π –∏–≤–µ–Ω—Ç: –ë–∏—Ç–≤–∞ –∫–ª–∞–Ω–æ–≤',
                content: '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —ç–ø–∏—á–µ—Å–∫–æ–º—É —Å—Ä–∞–∂–µ–Ω–∏—é! –í —ç—Ç—É —Å—É–±–±–æ—Ç—É —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∏–≤–µ–Ω—Ç "–ë–∏—Ç–≤–∞ –∫–ª–∞–Ω–æ–≤" —Å —Ü–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!',
                category: 'events',
                imageUrl: '',
                author: 'admin',
                authorId: 1,
                createdAt: new Date(Date.now() - 86400000).toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }),
                likes: 8,
                comments: []
            });

            this.posts.push({
                id: 3,
                title: 'üìö –ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
                content: '–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞, –æ—Å–Ω–æ–≤–∞—Ö RolePlay –∏ –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –≤–ª–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.',
                category: 'guides',
                imageUrl: '',
                author: 'admin',
                authorId: 1,
                createdAt: new Date(Date.now() - 172800000).toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }),
                likes: 12,
                comments: []
            });

            needSave = true;
        }

        if (needSave) {
            this.saveUsers();
            this.savePosts();
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    register(username, email, password) {
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (username.length < 3) {
            this.showNotification('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞!', 'error');
            return false;
        }

        if (password.length < 6) {
            this.showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!', 'error');
            return false;
        }

        if (this.users.find(user => user.username === username)) {
            this.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'error');
            return false;
        }

        if (this.users.find(user => user.email === email)) {
            this.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'error');
            return false;
        }

        const user = {
            id: Date.now(),
            username,
            email,
            password,
            role: 'user',
            createdAt: new Date().toISOString(),
            lastLogin: null
        };

        this.users.push(user);
        this.saveUsers();
        
        this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.', 'success');
        this.showTab('login');
        return true;
    }

    // –í—Ö–æ–¥
    login(username, password) {
        const user = this.users.find(u => u.username === username && u.password === password);
        
        if (user) {
            user.lastLogin = new Date().toISOString();
            this.currentUser = user;
            localStorage.setItem('currentUser', JSON.stringify(user));
            this.saveUsers();
            this.updateUI();
            this.showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username}!`, 'success');
            return true;
        } else {
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!', 'error');
            return false;
        }
    }

    // –í—ã—Ö–æ–¥
    logout() {
        this.showNotification(`–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, ${this.currentUser.username}!`, 'info');
        this.currentUser = null;
        localStorage.removeItem('currentUser');
        this.updateUI();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    saveUsers() {
        localStorage.setItem('users', JSON.stringify(this.users));
        this.updateStats();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loadUsers() {
        const savedUsers = localStorage.getItem('users');
        if (savedUsers) {
            this.users = JSON.parse(savedUsers);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
    loadPosts() {
        const savedPosts = localStorage.getItem('posts');
        if (savedPosts) {
            this.posts = JSON.parse(savedPosts);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    savePosts() {
        localStorage.setItem('posts', JSON.stringify(this.posts));
        this.updateStats();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    addPost(title, content, category, imageUrl = '') {
        if (!this.currentUser) {
            this.showNotification('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'error');
            return false;
        }

        if (this.currentUser.role !== 'admin') {
            this.showNotification('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã!', 'error');
            return false;
        }

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (title.trim().length === 0) {
            this.showNotification('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!', 'error');
            return false;
        }

        if (content.trim().length === 0) {
            this.showNotification('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!', 'error');
            return false;
        }

        const post = {
            id: Date.now(),
            title: title.trim(),
            content: content.trim(),
            category,
            imageUrl: imageUrl.trim(),
            author: this.currentUser.username,
            authorId: this.currentUser.id,
            createdAt: new Date().toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }),
            likes: 0,
            comments: []
        };

        this.posts.unshift(post);
        this.savePosts();
        this.displayPosts();
        this.displayAdminPosts();
        
        this.showNotification('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!', 'success');
        return true;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    deletePost(postId) {
        if (!this.currentUser) {
            this.showNotification('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'error');
            return;
        }

        const post = this.posts.find(p => p.id === postId);
        if (!post) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if (post.authorId !== this.currentUser.id && this.currentUser.role !== 'admin') {
            this.showNotification('–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã!', 'error');
            return;
        }

        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?')) {
            this.posts = this.posts.filter(p => p.id !== postId);
            this.savePosts();
            this.displayPosts();
            this.displayAdminPosts();
            this.showNotification('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω!', 'success');
        }
    }

    // –õ–∞–π–∫ –ø–æ—Å—Ç–∞
    likePost(postId) {
        if (!this.currentUser) {
            this.showNotification('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'error');
            return;
        }

        const post = this.posts.find(p => p.id === postId);
        if (post) {
            post.likes++;
            this.savePosts();
            this.displayPosts();
            this.showNotification('–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    displayPosts() {
        const postsList = document.getElementById('postsList');
        if (!postsList) return;

        console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤. –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:', this.posts.length);
        
        if (this.posts.length === 0) {
            postsList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <h3>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤</h3>
                    <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ–ø—É–±–ª–∏–∫—É–µ—Ç —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!</p>
                </div>
            `;
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –ø–æ—Å—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
        const recentPosts = this.posts.slice(0, 6);
        
        postsList.innerHTML = recentPosts.map(post => `
            <div class="post-card">
                ${post.imageUrl ? `
                    <img src="${post.imageUrl}" alt="${post.title}" class="post-image" 
                         onerror="this.style.display='none'">
                ` : ''}
                <div class="post-category">${this.getCategoryLabel(post.category)}</div>
                <h3 class="post-title">${post.title}</h3>
                <p class="post-content">${post.content.substring(0, 150)}${post.content.length > 150 ? '...' : ''}</p>
                <div class="post-meta">
                    <span class="post-author">üë§ ${post.author}</span>
                    <span class="post-date">üìÖ ${post.createdAt}</span>
                    <span class="post-likes">‚ù§Ô∏è ${post.likes}</span>
                </div>
                <div class="post-actions">
                    <button class="btn btn-primary btn-small" onclick="auth.likePost(${post.id})">‚ù§Ô∏è –õ–∞–π–∫</button>
                    ${this.currentUser && (this.currentUser.id === post.authorId || this.currentUser.role === 'admin') ? 
                        `<button class="btn btn-danger btn-small" onclick="auth.deletePost(${post.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>` : ''}
                </div>
            </div>
        `).join('');

        console.log('–ü–æ—Å—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã posts.html)
    displayAllPosts() {
        const postsList = document.getElementById('postsList');
        if (!postsList) return;

        console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤. –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:', this.posts.length);

        if (this.posts.length === 0) {
            postsList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <h3>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤</h3>
                    <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</p>
                </div>
            `;
            return;
        }

        postsList.innerHTML = this.posts.map(post => `
            <div class="post-card">
                ${post.imageUrl ? `
                    <img src="${post.imageUrl}" alt="${post.title}" class="post-image" 
                         onerror="this.style.display='none'">
                ` : ''}
                <div class="post-category">${this.getCategoryLabel(post.category)}</div>
                <h3 class="post-title">${post.title}</h3>
                <p class="post-content">${post.content}</p>
                <div class="post-meta">
                    <span class="post-author">üë§ ${post.author}</span>
                    <span class="post-date">üìÖ ${post.createdAt}</span>
                    <span class="post-likes">‚ù§Ô∏è ${post.likes}</span>
                </div>
                <div class="post-actions">
                    <button class="btn btn-primary btn-small" onclick="auth.likePost(${post.id})">‚ù§Ô∏è –õ–∞–π–∫</button>
                    ${this.currentUser && (this.currentUser.id === post.authorId || this.currentUser.role === 'admin') ? 
                        `<button class="btn btn-danger btn-small" onclick="auth.deletePost(${post.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>` : ''}
                </div>
            </div>
        `).join('');

        console.log('–í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
    displayAdminPosts() {
        const adminPostsList = document.getElementById('adminPostsList');
        if (!adminPostsList || !this.currentUser || this.currentUser.role !== 'admin') return;

        const adminPosts = this.posts.filter(post => post.authorId === this.currentUser.id);
        
        if (adminPosts.length === 0) {
            adminPostsList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ</p>
                </div>
            `;
            return;
        }

        adminPostsList.innerHTML = adminPosts.map(post => `
            <div class="post-card admin-post">
                <div class="post-header">
                    <h4>${post.title}</h4>
                    <button class="btn btn-danger btn-small" onclick="auth.deletePost(${post.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
                <div class="post-category">${this.getCategoryLabel(post.category)}</div>
                <p class="post-preview">${post.content.substring(0, 100)}${post.content.length > 100 ? '...' : ''}</p>
                <div class="post-meta">
                    <span>üìÖ ${post.createdAt}</span>
                    <span>‚ù§Ô∏è ${post.likes} –ª–∞–π–∫–æ–≤</span>
                    <span>üí¨ ${post.comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</span>
                </div>
            </div>
        `).join('');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryLabel(category) {
        const labels = {
            'news': 'üì∞ –ù–æ–≤–æ—Å—Ç–∏',
            'events': 'üéâ –ò–≤–µ–Ω—Ç—ã',
            'updates': 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            'guides': 'üìö –ì–∞–π–¥—ã',
            'announcements': 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è'
        };
        return labels[category] || 'üìÑ –ü–æ—Å—Ç';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStats() {
        const totalUsers = document.getElementById('totalUsers');
        const totalPosts = document.getElementById('totalPosts');
        const totalAdmins = document.getElementById('totalAdmins');
        const totalLikes = document.getElementById('totalLikes');

        if (totalUsers) totalUsers.textContent = this.users.length;
        if (totalPosts) totalPosts.textContent = this.posts.length;
        if (totalAdmins) totalAdmins.textContent = this.users.filter(u => u.role === 'admin').length;
        if (totalLikes) {
            const totalLikesCount = this.posts.reduce((sum, post) => sum + post.likes, 0);
            totalLikes.textContent = totalLikesCount;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        const authSection = document.getElementById('authSection');
        const mainContent = document.getElementById('mainContent');
        const userContent = document.getElementById('userContent');
        const adminPanel = document.getElementById('adminPanel');
        const loginBtn = document.getElementById('loginBtn');
        const userInfo = document.getElementById('userInfo');

        if (this.currentUser) {
            if (authSection) authSection.style.display = 'none';
            if (mainContent) mainContent.style.display = 'block';
            if (userContent) userContent.style.display = 'block';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
            const userName = document.getElementById('userName');
            const userRole = document.getElementById('userRole');
            const userEmail = document.getElementById('userEmail');
            const userRegDate = document.getElementById('userRegDate');

            if (userName) userName.textContent = this.currentUser.username;
            if (userRole) userRole.textContent = this.currentUser.role === 'admin' ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            if (userEmail) userEmail.textContent = this.currentUser.email;
            if (userRegDate) userRegDate.textContent = new Date(this.currentUser.createdAt).toLocaleDateString('ru-RU');

            if (this.currentUser.role === 'admin') {
                if (adminPanel) adminPanel.style.display = 'block';
                this.displayUsers();
                this.displayAdminPosts();
                this.updateStats();
            } else {
                if (adminPanel) adminPanel.style.display = 'none';
            }

            if (loginBtn) loginBtn.style.display = 'none';
            if (userInfo) {
                userInfo.innerHTML = `
                    <span>üëã –ü—Ä–∏–≤–µ—Ç, ${this.currentUser.username}!</span>
                    <button class="btn btn-secondary" onclick="auth.logout()">üö™ –í—ã–π—Ç–∏</button>
                    <button class="theme-toggle" onclick="toggleTheme()">üåô</button>
                `;
            }
        } else {
            if (authSection) authSection.style.display = 'none';
            if (mainContent) mainContent.style.display = 'block';
            if (userContent) userContent.style.display = 'none';
            if (adminPanel) adminPanel.style.display = 'none';
            
            if (loginBtn) loginBtn.style.display = 'inline-block';
            if (userInfo) {
                userInfo.innerHTML = `
                    <button class="theme-toggle" onclick="toggleTheme()">üåô</button>
                    <a href="#" class="btn btn-primary" onclick="showAuth()">üîë –í–æ–π—Ç–∏</a>
                `;
            }
        }

        this.displayPosts();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    displayUsers() {
        const userList = document.getElementById('userList');
        if (!userList) return;

        if (this.users.length === 0) {
            userList.innerHTML = '<div class="empty-state"><p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p></div>';
            return;
        }

        userList.innerHTML = this.users.map(user => `
            <div class="user-item">
                <div>
                    <strong>${user.username}</strong>
                    <p>üìß ${user.email} ‚Ä¢ ${user.role === 'admin' ? 'üëë –ê–¥–º–∏–Ω' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} ‚Ä¢ üìÖ ${new Date(user.createdAt).toLocaleDateString('ru-RU')}</p>
                    ${user.lastLogin ? `<small>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${new Date(user.lastLogin).toLocaleDateString('ru-RU')}</small>` : ''}
                </div>
                <div class="user-actions">
                    <button class="btn btn-danger btn-small" onclick="auth.deleteUser(${user.id})" ${user.role === 'admin' ? 'disabled' : ''}>
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                    ${user.role !== 'admin' ? `
                        <button class="btn btn-success btn-small" onclick="auth.makeAdmin(${user.id})">
                            üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
                        </button>
                    ` : ''}
                </div>
            </div>
        `).join('');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deleteUser(id) {
        if (!this.currentUser || this.currentUser.role !== 'admin') {
            this.showNotification('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!', 'error');
            return;
        }

        const user = this.users.find(u => u.id === id);
        if (!user) return;

        if (user.role === 'admin') {
            this.showNotification('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', 'error');
            return;
        }

        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}?`)) {
            this.users = this.users.filter(u => u.id !== id);
            // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.posts = this.posts.filter(post => post.authorId !== id);
            this.saveUsers();
            this.savePosts();
            this.displayUsers();
            this.displayPosts();
            this.showNotification(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —É–¥–∞–ª–µ–Ω!`, 'success');
        }
    }

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    makeAdmin(id) {
        if (!this.currentUser || this.currentUser.role !== 'admin') {
            this.showNotification('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!', 'error');
            return;
        }

        const user = this.users.find(u => u.id === id);
        if (user) {
            user.role = 'admin';
            this.saveUsers();
            this.displayUsers();
            this.showNotification(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë`, 'success');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (!document.querySelector('.notification-styles')) {
            const styles = document.createElement('style');
            styles.className = 'notification-styles';
            styles.textContent = `
                .notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 1000;
                    max-width: 400px;
                    animation: slideInRight 0.3s ease;
                }
                .notification-content {
                    background: var(--bg-color);
                    border: 1px solid var(--border-color);
                    border-radius: var(--radius);
                    padding: 1rem;
                    box-shadow: var(--shadow-lg);
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    gap: 1rem;
                }
                .notification-success .notification-content {
                    border-left: 4px solid var(--success-color);
                }
                .notification-error .notification-content {
                    border-left: 4px solid var(--danger-color);
                }
                .notification-info .notification-content {
                    border-left: 4px solid var(--primary-color);
                }
                .notification-close {
                    background: none;
                    border: none;
                    font-size: 1.5rem;
                    cursor: pointer;
                    color: var(--text-light);
                }
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(styles);
        }

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.animation = 'slideOutRight 0.3s ease forwards';
                setTimeout(() => notification.remove(), 300);
            }
        }, 5000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
let auth;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
function showTab(tabName) {
    document.querySelectorAll('.auth-tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('[id$="Tab"]').forEach(tab => tab.style.display = 'none');
    
    event.target.classList.add('active');
    const tabElement = document.getElementById(tabName + 'Tab');
    if (tabElement) {
        tabElement.style.display = 'block';
    }
}

function showAdminTab(tabName) {
    document.querySelectorAll('.admin-tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.admin-section').forEach(section => section.classList.remove('active'));
    
    event.target.classList.add('active');
    const tabElement = document.getElementById(tabName + 'Tab');
    if (tabElement) {
        tabElement.classList.add('active');
    }
}

function showAuth() {
    const authSection = document.getElementById('authSection');
    const mainContent = document.getElementById('mainContent');
    
    if (authSection) authSection.style.display = 'block';
    if (mainContent) mainContent.style.display = 'none';
}

function handleRegister(event) {
    event.preventDefault();
    
    const username = document.getElementById('regUsername').value;
    const email = document.getElementById('regEmail').value;
    const password = document.getElementById('regPassword').value;

    if (auth) {
        auth.register(username, email, password);
    }
    event.target.reset();
}

function handleLogin(event) {
    event.preventDefault();
    
    const username = document.getElementById('loginUsername').value;
    const password = document.getElementById('loginPassword').value;

    if (auth && auth.login(username, password)) {
        const authSection = document.getElementById('authSection');
        const mainContent = document.getElementById('mainContent');
        
        if (authSection) authSection.style.display = 'none';
        if (mainContent) mainContent.style.display = 'block';
    }
    event.target.reset();
}

function logout() {
    if (auth) {
        auth.logout();
    }
}

function addPost(event) {
    event.preventDefault();
    
    const title = document.getElementById('postTitle').value;
    const content = document.getElementById('postContent').value;
    const category = document.getElementById('postCategory').value;
    const imageUrl = document.getElementById('postImage').value;

    if (auth) {
        auth.addPost(title, content, category, imageUrl);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
    document.body.classList.toggle('dark-theme');
    localStorage.setItem('theme', document.body.classList.contains('dark-theme') ? 'dark' : 'light');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth = new AuthSystem();
    
    console.log('–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', auth.users);
    console.log('–ü–æ—Å—Ç—ã:', auth.posts);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã posts.html)
function displayAllPosts() {
    if (typeof auth !== 'undefined' && auth) {
        auth.displayAllPosts();
    }
}